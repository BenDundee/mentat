from atomic_agents.agents.base_agent import BaseIOSchema
from pydantic import Field
from typing import Dict, List, Literal, Optional


class SimpleMessageContentIOSchema(BaseIOSchema):
    """ A message in a conversation between a human and an AI agent """
    content: str = Field(..., description="A message containing simple text input in a conversation between a human and an AI agent")


class MulitModalMessageContentIOSchema(BaseIOSchema):
    """ A message in a conversation between a human and an AI agent """
    content: List[Dict[str, str]] = \
        Field(..., description="A message containing multi-modal input in a conversation between a human and an AI agent")


class Chunk(BaseIOSchema):
    """This schema represents a single chunk of context"""
    text: str = Field(..., description="The text of the chunk")
    metadata: Dict[str, str] = Field(..., description="The metadata associated with the chunk")
    distance: float = Field(..., description="The distance between the chunk and the query")
    id: str = Field(..., description="The ID of the chunk")


class QueryResult(BaseIOSchema):
    """This schema represents the result of a query"""
    results: List[Chunk] = Field(..., description="A list of chunks returned by the query")



class QueryAgentInputSchema(BaseIOSchema):
    """ Input schema for the QueryAgent """
    user_input: str = Field(..., description="Input from a user, for which queries will be constructed")


class QueryAgentOutputSchema(BaseIOSchema):
    """Output schema for the query agent."""
    reasoning: str = Field(..., description="The reasoning process leading up to the final query")
    query: str = Field(..., description="The semantic search query to use for retrieving relevant chunks")


class PersonaAgentInputSchema(BaseIOSchema):
    """Input schema for the PersonaAgent"""
    query_result: QueryResult = Field(..., description="A list of query results to use for context generation")


class Persona(BaseIOSchema):
    """Persona summary for user"""
    core_values: List[str] = Field(..., description="The list of core values of the persona")
    strengths: List[str] = Field(..., description="The list of strengths of the persona")
    growth_areas: List[str] = Field(..., description="The list of growth areas of the persona")
    communication_style: str = Field(..., description="The communication style of the persona")
    preferred_feedback_style: str = Field(..., description="The preferred feedback style of the persona")
    motivators: List[str] = Field(..., description="The list of motivators of the persona")

    def get_summary(self):
        return {
            "core_values": self.core_values,
            "strengths": self.strengths,
            "growth_areas": self.growth_areas,
            "communication_style": self.communication_style,
            "preferred_feedback_style": self.preferred_feedback_style,
            "motivators": self.motivators
        }

    def __eq__(self, other):
        return self.get_summary() == other.get_summary()

    def is_empty(self):
        return self.get_summary() == self.get_empty_persona().get_summary()

    @staticmethod
    def get_empty_persona():
        return Persona(
            core_values=[],
            strengths=[],
            growth_areas=[],
            communication_style="",
            preferred_feedback_style="",
            motivators=[]
        )


class PreprocessingAgentInputSchema(BaseIOSchema):
    """ Input schema for the PreprocessingAgent """
    user_input: str = Field(..., description="The document text to preprocess")


class PreprocessingAgentOutputSchema(BaseIOSchema):
    """ Output schema for the PreprocessingAgent """
    normalized_query: str = Field(..., description="The normalized content after preprocessing")
    detected_intent: Optional[Literal["coaching_request", "journal_entry", "document_upload"]] = \
        Field(..., description="The detected intent of the document: `coaching_request`, `journal_entry`, or `document_upload`")
    document_text: Optional[str] = Field(..., description="The document text after preprocessing")
    document_type: Optional[Literal["reflection", "resume", "assessment", "hr_review", "other"]] = \
        Field(..., description="The type of the document: `reflection`, `resume`, `assessment`, `hr_review`, `other`")


class SearchAgentInputSchema(BaseIOSchema):
    """This is the input schema for the QueryAgent."""
    user_input: str = Field(..., description="Input from a user, for which queries will be generated")
    num_queries: int = Field(..., description="The number of search queries to generate.")


class SearchAgentOutputSchema(BaseIOSchema):
    """This is the output schema for the QueryAgent."""
    queries: List[str] = Field(..., description="A list of search queries generated by the agent.")


class SearchResultItem(BaseIOSchema):
    """This schema represents a single search result item"""
    url: str = Field(..., description="The URL of the search result")
    title: Optional[str] = Field(None, description="The title of the search result")
    content: Optional[str] = Field(None, description="The content snippet of the search result")
    query: str = Field(..., description="The query used to obtain this search result")


class SearchToolInputSchema(BaseIOSchema):
    """
    Schema for input to a tool for searching for information, news, references, and other content using SearxNG.
    Returns a list of search results with a short description or content snippet and URLs for further exploration
    """

    queries: List[str] = Field(..., description="List of search queries.")
    category: Optional[Literal["general", "news", "social_media"]] = Field(
        "general", description="Category of the search queries."
    )


class SearchToolOutputSchema(BaseIOSchema):
    """This schema represents the output of the SearxNG search tool."""
    results: List[SearchResultItem] = Field(..., description="List of search result items")
    category: Optional[str] = Field(None, description="The category of the search results")


class Goal(BaseIOSchema):
    """This schema represents a single coaching goal"""
    description: str = Field(..., description="The description of the coaching goal")
    start_date: str = Field(..., description="The start date of the coaching goal")
    end_date: Optional[str] = Field(None, description="The end date of the coaching goal")
    due_date: Optional[str] = Field(None, description="The due date of the coaching goal")
    status: Literal["in progress", "on hold", "completed"] = Field(..., description="The status of the coaching goal")


class ResponseGeneratorAgentOutputSchema(BaseIOSchema):
    """This is the output schema for the ResponseGeneratorAgent."""
    response: str = Field(..., description="The response generated by the agent")
    reasoning: str = Field(..., description="The reasoning process leading up to the final response")


class FeedbackAgentOutputSchema(BaseIOSchema):
    """This is the output schema for the FeedbackAgent."""
    feedback: str = Field(..., description="The critic response generated by the agent")
    reasoning: str = Field(..., description="The reasoning process leading up to the final critic response")
    rewrite_response: bool = Field(..., description="Whether the response should be rewritten by the writer")


class ResponseDraftWithFeedback(BaseIOSchema):
    """This is the input schema for the ResponseDraftWithFeedback."""
    response_draft: str = Field(..., description="The response draft generated by the agent")
    feedback: str = Field(..., description="The feedback generated by the agent")
    reasoning: str = Field(..., description="The reasoning process leading up to the final response")


class ContextManagerAgentInputSchema(BaseIOSchema):
    """This is the input schema for the ContextManagerAgent."""
    user_input: str = Field(..., description="Input from a user, for which context will be generated")
    search_results: QueryResult = Field(..., description="Search results relevant to the user's query")
    query_result: QueryResult = Field(..., description="A list of query results to use for context generation")
    goals: Optional[List[Goal]] = Field(None, description="A list of coaching goals for the user")


class ContextManagerAgentOutputSchema(BaseIOSchema):
    """ This is the output schema for the ContextManagerAgent. """
    persona: Persona = Field(..., description="The persona summary for the user")
    response_instruction: str = Field(..., description="The high-level intent of the user")
    chunks: List[Chunk] = Field(..., description="A list of chunks used for context generation, in order of relevance")
    goals: Optional[List[Goal]] = Field(None, description="A list of coaching goals for the user")
    context_summary: Optional[str] = Field(None, description="A summary of the context chunks")
    conflict_flags: List[str] = Field(..., description="A list of flags indicating potential conflicts")
    previous_responses: Optional[List[ResponseDraftWithFeedback]] = \
        Field(None, description="The previous responses to the user, with feedback from the feedback agent")

    def add_previous_response(self, previous_response: ResponseDraftWithFeedback):
        if self.previous_responses is None:
            self.previous_responses = [previous_response]
        else:
            self.previous_responses.append(previous_response)
    